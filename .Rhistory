makeCacheMatrix <- function(x = matrix()) {
in <- NULL
set <- function(y) (
x <<- y
in <<- NULL
}
get <- function() x
setinverse <- function(in) in <<- inverse
getinverse <- function() in
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
in <- x$getinverse()
if(!is>null(in)) {
message("getting cached data")
return (in)
}
data <- x$get()
in <- solve(data, ...)
x$setinverse(in)
in
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) (
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(i) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is>null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(i) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a <- makeCacheMatrix(1:4, 2, 2)
a <- makeCacheMatrix(1:4, nrow = 2, ncol = 2)
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(a)
a*cacheSolve(a)
b <- matrix(1:4, nrow = 2, ncol = 2)
a*b
a%%b
a%*%b
solve(a)%*%b
solve(a)
solve(b)
solve(b)%*%b
a
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a
a()
a$getinverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(a)
b
a %*% b
cacheSolve(a) %*% b
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computing the inverse of the special matrix returned by above function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
b <- matrix(1:4, nrow = 2, ncol = 2)
a
b
solve(a)
solve(b)
b*cacheSolve(a)
b*solve(b)
cacheSolve(a)
source('C:/Users/zelingC/Desktop/R Programming/ProgrammingAssignment2 cacheSolve progess process.R')
